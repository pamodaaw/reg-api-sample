openapi: 3.0.0
info:
  description: >
    This document specifies an **RESTful API for User Registration** in **WSO2 Identity Server** which can be used to perform complete user registration in an API based manner.
  version: 1.0.0
  title: WSO2 Identity Server - User Registration Rest API
  contact:
    name: WSO2
    url: 'https://wso2.com/products/identity-server/'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /registration/initiate:
    post:
      operationId: initiateRegistration
      description: This API provides the capability to initiate a user registration according to the configurations of the application.
      requestBody:
        required: true
        description: User registration initiate request body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitRegRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegPromptResponse'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegCompleteResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /registration/submit:
    post:
      operationId: submitRegistrationData
      description: This API provides the capability to continue communication of data for an initiated registration
      requestBody:
        required: true
        description: User registration initiate request body.
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/SubmitRegRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegPromptResponse'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegCompleteResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
components:
  schemas:
    InitRegRequest:
      description: |
        The request object to initiate a registration flow configured against the given application id. If the end result of the user creation should be aligned with a specific protol, that must be indicated in the initial request.
      required:
        - applicationId
      properties:
        applicationId:
          type: string
          description: The id of the application for which the useer registration is triggered. This will be used to retrieve the configured user registration flow.
          example: 3bd1f207-e5b5-4b45-8a91-13b0acfb2151
          
    SubmitRegRequest:
      description: |
        The request object that will be communicated to the server as the intermediate steps associated with the registration flow. This will contain the user inputs for the attributes requested.
      required:
        - flowId
        - selectedRegistrationExecutor
      properties:
        flowId:
          type: string
          description: A unique identifier for the registration flow returned from the server. This identifier will be used to track the continuation of the flow.
          example: d13ec8d2-2d1e-11ee-be56-0242ac120002
        selectedRegistrationExecutor:
          $ref: '#/components/schemas/SelectedRegExecutor'
    
    SelectedRegExecutor:
      type: object
      description: Contains the data related to a selected registration executor.
      required:
        - registrationExecutorId
      properties:
        registrationExecutorId:
          type: string
          description: The unique identifier of the selected registration executor.
          example: db1220160cb14f0a8d74b831e0939b62
        params:
          type: object
          description: The parameters required by the registration executor to perform user onboarding.
          additionalProperties:
            type: string
          example:
            username: johnd
            firstname: John
            lastname: Doe

    RegPromptResponse:
      type: object
      description: User registration intermediate response body.
      required:
        - flowId
        - flowStatus
        - nextStep
        - links
      properties:
        flowId:
          type: string
          description: A unique identifier for the registration flow returned from the server. This identifier will be used to track the continuation of the flow.
          example: d13ec8d2-2d1e-11ee-be56-0242ac120002
        flowStatus:
          type: string
          enum:
            - INCOMPLETE
            - FAILURE
          description: |
            The status of the registration flow. 
            There is a seperate response modal for the COMPLETE state with user assertion related to be used in the authentication.
          example: INCOMPLETE
        nextStep:
          $ref: '#/components/schemas/NextStep'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
          description: Contains the urls related to the registration flow.
          
    RegCompleteResponse:
      type: object
      description: User registration complete response body.
      required:
        - flowId
        - flowStatus
        - userAssertion
        - links
      properties:
        flowId:
          type: string
          description: A unique identifier for the registration flow returned from the server. This identifier will be used to track the continuation of the flow.
          example: d13ec8d2-2d1e-11ee-be56-0242ac120002
        flowStatus:
          type: string
          enum:
            - COMPLETE
          description: |
            The status of the registration flow. This will always be COMPLETE. 
          example: COMPLETE
        userAssertion:
          type: string
          description: An assertion for the newly created user based on the authentication protocol to be used for proceeding with the authentication. If the registration is not bound to any protocol, this will be null.
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
          description: Contains the urls related to the registration flow and/or to proceed with the authentication flow.

    NextStep:
      type: object
      description: Contains the registration details related to the next step. 
      properties:
        stepType:
          type: string
          enum:
            - MULTI_OPTIONS
            - SINGLE_OPTION
            - AGG_OPTIONS
          description: |
            The type of the current step in the registration flow.
            - MULTI_OPTIONS - The current step is for the selection of the registration option.
            - SINGLE_OPTION - The current step is for obtaining information from the user to proceed the registration
          example: SINGLE_OPTION
        registrationStepExecutors:
          type: array
          items:
            $ref: '#/components/schemas/RegistrationStepExecutor'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageInfo'


    RegistrationStepExecutor:
      type: object
      description: The details of an executor which perform a specific task of the registration flow.
      properties:
        id:
          type: string
          description: The unique identifier of the registration component.
          example: e54636fe-2f7a-11ee-be56-0242ac120002
        executor:
          type: string
          description: The name of registration executor.
          example: Attribute Collector
        metadata:
          $ref: '#/components/schemas/RegExecutorMetadata'

    
    RegExecutorMetadata:
      type: object
      description: Contains the metadata related to a registration executor.
      required:
        - i18nKey
      properties:
        i18nKey:
          type: string
          description: The i18n key for the registration executor. This can be used to get the localized text for the registration executor.
        promptType:
          type: string
          enum:
            - USER_PROMPT
            - INTERNAL_PROMPT
            - REDIRECTION_PROMPT
          description: |
            The type of the prompt. The prompt can be one of the following.
            - USER_PROMPT - The prompt is for the user to input the required parameters for the registration.
            - INTERNAL_PROMPT - The prompt is for the system to perform an internal action which will result in 
              obtaining the required parameters
            - REDIRECTION_PROMPT - The prompt is for the user to be redirected to a different url which will result in obtaining the required parameters. 
            ex: Register using a social authenticator which requires the user to be 
              redirect to the federation identity provider. In this case, other required data will be available in `additionalData`.
          example: USER_PROMPT
        params:
          type: array
          items:
            $ref: '#/components/schemas/ParamInfo'
        additionalData:
          type: object
          additionalProperties:
            type: string
          description: |
            Contains any additional data related to the authenticator which would be needed for the application to perform 
            authentication. ex: Fido2 challenge, redirectUrl for federated authentication.
          example:
            redirectUrl: https://accounts.google.com/o/oauth2/auth?response_type=code&redirect_uri=https%3A%2F%2Fexample-app.com%2Fredirect&state=e12f-ed27-49e5-ad0a-8bbb5671d81e%2COIDC&client_id=231644702133-ds23592jt.apps.googleusercontent.com&scope=openid
  
    ParamInfo:
      type: object
      description: Contains the data related to a required parameter in the registration step. This data can be used to render the registration UI and collect data from the user
      required:
        - name
        - type
        - isConfidential
        - isMandatory
        - order
        - i18nKey
      properties:
        name:
          type: string
          description: The parameter identifier.
          example: username
        type:
          type: string
          enum:
            - STRING
            - NUMBER
            - BOOLEAN
            - DATE
          description: Indicates the data type of the parameter.
          example: STRING
        isConfidential:
          type: boolean
          description: Indicates whether the parameter is confidential or not.
          example: false
        isMandatory:
          type: boolean
          description: Indicates whether the parameter is mandatory to be filled.
          example: true
        order:
          type: integer
          description: Indicates the recommended display order of the parameter.
          example: 1
        validationRegex:
          type: string
          description: Contains the regex pattern to validate the parameter value.
          example: ^[\S]{3,50}$
        i18nKey:
          type: string
          description: The i18n key for the parameter. This can be used to get the localized text for the parameter.
          example: param.username
          
    MessageInfo:
      type: object
      description: Contains the data related to a message in the registration step.
      required:
        - type
        - messageId
        - message
        - context
        - i18nKey
      properties:
        type:
          type: string
          enum:
            - INFO
            - ERROR
          description: Indicates the type of the message.
          example: ERROR
        messageId:
          type: string
          description: The message identifier.
          example: msg_invalid_username
        message:
          type: string
          description: The message.
          example: The username is not available.
        context:
          type: array
          items:
            $ref: '#/components/schemas/Context'
        i18nKey:
          type: string
          description: The i18n key for the message. This can be used to get the localized text for the message.
          example: error.invalid.username  
              
    Context:
      type: object
      description: |
        Contains any context information related to the message. The context information can be used to create localized messages. The available different context information is bound to the messageId. ex - mobile number that the OTP is sent.
      required:
        - key
        - value
      properties:
        key:
          type: string
          example: maskedNumber
        value:
          type: string
          example: '+94*****466'
          
    Link:
      type: object
      description: Contains the data related to a link.
      required:
        - name
        - href
        - method
      properties:
        name:
          type: string
          description: The identifier of the link.
          example: registration
        href:
          type: string
          description: The relative url of the link.
          example: /api/registration/v1
        method:
          type: string
          enum:
            - GET
            - POST
          description: The supported http methods of the link.
          example: POST
          
    Error:
      type: object
      description: Contains the data related to an error.
      required:
        - code
        - message
        - description
        - traceId
      properties:
        code:
          type: string
          example: ABA-00000
        message:
          type: string
          example: Some error message.
        description:
          type: string
          example: Some error description.
        traceId:
          type: string
          example: e0fbcfeb-3617-43c4-8dd0-7b7d38e13047
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/PAMODA_1/RegistrationAPI/1.0.0
  - url: 'https://{server-url}/t/{tenant-domain}/api/users/v1'
    variables:
      tenant-domain:
        default: "carbon.super"
      server-url:
        default: "localhost:9443"